{"ast":null,"code":"import { get, groupBy, reject, maxBy, minBy } from 'lodash';\nimport { createSelector } from 'reselect';\nimport moment from 'moment';\nimport { ETHER_ADDRESS, GREEN, RED, ether, tokens } from '../helpers'; // TODO: Move me to helpers file\n\nexport const formatBalance = balance => {\n  const precision = 100; // 2 decimal places\n\n  balance = ether(balance);\n  balance = Math.round(balance * precision) / precision; // Use 2 decimal places\n\n  return balance;\n};\n\nconst account = state => get(state, 'web3.account');\n\nexport const accountSelector = createSelector(account, a => a);\n\nconst web3 = state => get(state, 'web3.connection');\n\nexport const web3Selector = createSelector(web3, w => w);\n\nconst tokenLoaded = state => get(state, 'token.loaded', false);\n\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl);\n\nconst token = state => get(state, 'token.contract');\n\nexport const tokenSelector = createSelector(token, t => t);\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false);\n\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el);\n\nconst exchange = state => get(state, 'exchange.contract');\n\nexport const exchangeSelector = createSelector(exchange, e => e);\nexport const contractsLoadedSelector = createSelector(tokenLoaded, exchangeLoaded, (tl, el) => tl && el); // All Orders\n\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false);\n\nconst allOrders = state => get(state, 'exchange.allOrders.data', []); // Cancelled orders\n\n\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false);\n\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded);\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', []);\n\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o); // Filled Orders\n\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false);\n\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded);\n\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', []);\n\nexport const filledOrdersSelector = createSelector(filledOrders, orders => {\n  // Sort orders by date ascending for price comparison\n  orders = orders.sort((a, b) => a.timestamp - b.timestamp); // Decorate the orders\n\n  orders = decorateFilledOrders(orders); // Sort orders by date descending for display\n\n  orders = orders.sort((a, b) => b.timestamp - a.timestamp);\n  return orders;\n});\n\nconst decorateFilledOrders = orders => {\n  // Track previous order to compare history\n  let previousOrder = orders[0];\n  return orders.map(order => {\n    order = decorateOrder(order);\n    order = decorateFilledOrder(order, previousOrder);\n    previousOrder = order; // Update the previous order once it's decorated\n\n    return order;\n  });\n};\n\nconst decorateOrder = order => {\n  let etherAmount;\n  let tokenAmount;\n\n  if (order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive;\n    tokenAmount = order.amountGet;\n  } else {\n    etherAmount = order.amountGet;\n    tokenAmount = order.amountGive;\n  } // Calculate token price to 5 decimal places\n\n\n  const precision = 100000;\n  let tokenPrice = etherAmount / tokenAmount;\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\n  return { ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  };\n};\n\nconst decorateFilledOrder = (order, previousOrder) => {\n  return { ...order,\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  };\n};\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n  // Show green price if only one order exists\n  if (previousOrder.id === orderId) {\n    return GREEN;\n  } // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n\n\n  if (previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN; // success\n  } else {\n    return RED; // danger\n  }\n};\n\nconst openOrders = state => {\n  const all = allOrders(state);\n  const filled = filledOrders(state);\n  const cancelled = cancelledOrders(state);\n  const openOrders = reject(all, order => {\n    const orderFilled = filled.some(o => o.id === order.id);\n    const orderCancelled = cancelled.some(o => o.id === order.id);\n    return orderFilled || orderCancelled;\n  });\n  return openOrders;\n};\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state);\n\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded); // Create the order book\n\nexport const orderBookSelector = createSelector(openOrders, orders => {\n  // Decorate orders\n  orders = decorateOrderBookOrders(orders); // Group orders by \"orderType\"\n\n  orders = groupBy(orders, 'orderType'); // Fetch buy orders\n\n  const buyOrders = get(orders, 'buy', []); // Sort buy orders by token price\n\n  orders = { ...orders,\n    buyOrders: buyOrders.sort((a, b) => b.tokenPrice - a.tokenPrice)\n  }; // Fetch sell orders\n\n  const sellOrders = get(orders, 'sell', []); // Sort sell orders by token price\n\n  orders = { ...orders,\n    sellOrders: sellOrders.sort((a, b) => b.tokenPrice - a.tokenPrice)\n  };\n  return orders;\n});\n\nconst decorateOrderBookOrders = orders => {\n  return orders.map(order => {\n    order = decorateOrder(order);\n    order = decorateOrderBookOrder(order);\n    return order;\n  });\n};\n\nconst decorateOrderBookOrder = order => {\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  return { ...order,\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n  };\n};\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded);\nexport const myFilledOrdersSelector = createSelector(account, filledOrders, (account, orders) => {\n  // Find our orders\n  orders = orders.filter(o => o.user === account || o.userFill === account); // Sort by date ascending\n\n  orders = orders.sort((a, b) => a.timestamp - b.timestamp); // Decorate orders - add display attributes\n\n  orders = decorateMyFilledOrders(orders, account);\n  return orders;\n});\n\nconst decorateMyFilledOrders = (orders, account) => {\n  return orders.map(order => {\n    order = decorateOrder(order);\n    order = decorateMyFilledOrder(order, account);\n    return order;\n  });\n};\n\nconst decorateMyFilledOrder = (order, account) => {\n  const myOrder = order.user === account;\n  let orderType;\n\n  if (myOrder) {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  } else {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy';\n  }\n\n  return { ...order,\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n    orderSign: orderType === 'buy' ? '+' : '-'\n  };\n};\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded);\nexport const myOpenOrdersSelector = createSelector(account, openOrders, (account, orders) => {\n  // Filter orders created by current account\n  orders = orders.filter(o => o.user === account); // Decorate orders - add display attributes\n\n  orders = decorateMyOpenOrders(orders); // Sort orders by date descending\n\n  orders = orders.sort((a, b) => b.timestamp - a.timestamp);\n  return orders;\n});\n\nconst decorateMyOpenOrders = (orders, account) => {\n  return orders.map(order => {\n    order = decorateOrder(order);\n    order = decorateMyOpenOrder(order, account);\n    return order;\n  });\n};\n\nconst decorateMyOpenOrder = (order, account) => {\n  let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  return { ...order,\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED\n  };\n};\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded);\nexport const priceChartSelector = createSelector(filledOrders, orders => {\n  // Sort orders by date ascending to compare history\n  orders = orders.sort((a, b) => a.timestamp - b.timestamp); // Decorate orders - add display attributes\n\n  orders = orders.map(o => decorateOrder(o)); // Get last 2 order for final price & price change\n\n  let secondLastOrder, lastOrder;\n  [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length); // get last order price\n\n  const lastPrice = get(lastOrder, 'tokenPrice', 0); // get second last order price\n\n  const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0);\n  return {\n    lastPrice,\n    lastPriceChange: lastPrice >= secondLastPrice ? '+' : '-',\n    series: [{\n      data: buildGraphData(orders)\n    }]\n  };\n});\n\nconst buildGraphData = orders => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, o => moment.unix(o.timestamp).startOf('hour').format()); // Get each hour where data exists\n\n  const hours = Object.keys(orders); // Build the graph series\n\n  const graphData = hours.map(hour => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]; // Calculate price values - open, high, low, close\n\n    const open = group[0]; // first order\n\n    const high = maxBy(group, 'tokenPrice'); // high price\n\n    const low = minBy(group, 'tokenPrice'); // low price\n\n    const close = group[group.length - 1]; // last order\n\n    return {\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    };\n  });\n  return graphData;\n};\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false);\n\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status);\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false);\n\nexport const orderFillingSelector = createSelector(orderFilling, status => status); // BALANCES\n\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true);\n\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status);\n\nconst etherBalance = state => get(state, 'web3.balance', 0);\n\nexport const etherBalanceSelector = createSelector(etherBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst tokenBalance = state => get(state, 'token.balance', 0);\n\nexport const tokenBalanceSelector = createSelector(tokenBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0);\n\nexport const exchangeEtherBalanceSelector = createSelector(exchangeEtherBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0);\n\nexport const exchangeTokenBalanceSelector = createSelector(exchangeTokenBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null);\n\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount);\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null);\n\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount);\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null);\n\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount);\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null);\n\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount);\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {});\n\nexport const buyOrderSelector = createSelector(buyOrder, order => order);\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {});\n\nexport const sellOrderSelector = createSelector(sellOrder, order => order);","map":{"version":3,"sources":["/Users/louistomczak/blockchain-developer-bootcamp/src/store/selectors.js"],"names":["get","groupBy","reject","maxBy","minBy","createSelector","moment","ETHER_ADDRESS","GREEN","RED","ether","tokens","formatBalance","balance","precision","Math","round","account","state","accountSelector","a","web3","web3Selector","w","tokenLoaded","tokenLoadedSelector","tl","token","tokenSelector","t","exchangeLoaded","exchangeLoadedSelector","el","exchange","exchangeSelector","e","contractsLoadedSelector","allOrdersLoaded","allOrders","cancelledOrdersLoaded","cancelledOrdersLoadedSelector","loaded","cancelledOrders","cancelledOrdersSelector","o","filledOrdersLoaded","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","tokenPrice","formattedTimestamp","unix","format","tokenPriceClass","id","orderId","openOrders","all","filled","cancelled","orderFilled","some","orderCancelled","orderBookLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","filter","user","userFill","decorateMyFilledOrders","decorateMyFilledOrder","myOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","slice","length","lastPrice","secondLastPrice","lastPriceChange","series","data","buildGraphData","startOf","hours","Object","keys","graphData","hour","group","open","high","low","close","x","Date","y","orderCancelling","orderCancellingSelector","status","orderFilling","orderFillingSelector","balancesLoading","balancesLoadingSelector","etherBalance","etherBalanceSelector","tokenBalance","tokenBalanceSelector","exchangeEtherBalance","exchangeEtherBalanceSelector","exchangeTokenBalance","exchangeTokenBalanceSelector","etherDepositAmount","etherDepositAmountSelector","amount","etherWithdrawAmount","etherWithdrawAmountSelector","tokenDepositAmount","tokenDepositAmountSelector","tokenWithdrawAmount","tokenWithdrawAmountSelector","buyOrder","buyOrderSelector","sellOrder","sellOrderSelector"],"mappings":"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","sourcesContent":["import { get, groupBy, reject, maxBy, minBy } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ETHER_ADDRESS, GREEN, RED, ether, tokens } from '../helpers'\n\n// TODO: Move me to helpers file\nexport const formatBalance = (balance) => {\n  const precision = 100 // 2 decimal places\n\n  balance = ether(balance)\n  balance = Math.round(balance * precision) / precision // Use 2 decimal places\n\n  return balance\n}\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n  tokenLoaded,\n  exchangeLoaded,\n  (tl, el) => (tl && el)\n)\n\n// All Orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\n\n// Cancelled orders\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\n\n// Filled Orders\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\nexport const filledOrdersSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    // Sort orders by date ascending for price comparison\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate the orders\n    orders = decorateFilledOrders(orders)\n    // Sort orders by date descending for display\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateFilledOrders = (orders) => {\n  // Track previous order to compare history\n  let previousOrder = orders[0]\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateFilledOrder(order, previousOrder)\n      previousOrder = order // Update the previous order once it's decorated\n      return order\n    })\n  )\n}\n\nconst decorateOrder = (order) => {\n  let etherAmount\n  let tokenAmount\n\n  if(order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive\n    tokenAmount = order.amountGet\n  } else {\n    etherAmount = order.amountGet\n    tokenAmount = order.amountGive\n  }\n\n  // Calculate token price to 5 decimal places\n  const precision = 100000\n  let tokenPrice = (etherAmount / tokenAmount)\n  tokenPrice = Math.round(tokenPrice * precision) / precision\n\n  return({\n    ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  })\n}\n\nconst decorateFilledOrder = (order, previousOrder) => {\n  return({\n    ...order,\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  })\n}\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n  // Show green price if only one order exists\n  if(previousOrder.id === orderId) {\n    return GREEN\n  }\n\n  // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n  if(previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN // success\n  } else {\n    return RED // danger\n  }\n}\n\nconst openOrders = state => {\n  const all = allOrders(state)\n  const filled = filledOrders(state)\n  const cancelled = cancelledOrders(state)\n\n  const openOrders = reject(all, (order) => {\n    const orderFilled = filled.some((o) => o.id === order.id)\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\n    return(orderFilled || orderCancelled)\n  })\n\n  return openOrders\n}\n\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// Create the order book\nexport const orderBookSelector = createSelector(\n  openOrders,\n  (orders) => {\n    // Decorate orders\n    orders = decorateOrderBookOrders(orders)\n    // Group orders by \"orderType\"\n    orders = groupBy(orders, 'orderType')\n    // Fetch buy orders\n    const buyOrders = get(orders, 'buy', [])\n    // Sort buy orders by token price\n    orders = {\n      ...orders,\n      buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    // Fetch sell orders\n    const sellOrders = get(orders, 'sell', [])\n    // Sort sell orders by token price\n    orders = {\n      ...orders,\n      sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    return orders\n  }\n)\n\nconst decorateOrderBookOrders = (orders) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateOrderBookOrder(order)\n      return(order)\n    })\n  )\n}\n\nconst decorateOrderBookOrder = (order) => {\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n  })\n}\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const myFilledOrdersSelector = createSelector(\n  account,\n  filledOrders,\n  (account, orders) => {\n    // Find our orders\n    orders = orders.filter((o) => o.user === account || o.userFill === account)\n    // Sort by date ascending\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate orders - add display attributes\n    orders = decorateMyFilledOrders(orders, account)\n    return orders\n  }\n)\n\nconst decorateMyFilledOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyFilledOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyFilledOrder = (order, account) => {\n  const myOrder = order.user === account\n\n  let orderType\n  if(myOrder) {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  } else {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n  }\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderSign: (orderType === 'buy' ? '+' : '-')\n  })\n}\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\nexport const myOpenOrdersSelector = createSelector(\n  account,\n  openOrders,\n  (account, orders) => {\n    // Filter orders created by current account\n    orders = orders.filter((o) => o.user === account)\n    // Decorate orders - add display attributes\n    orders = decorateMyOpenOrders(orders)\n    // Sort orders by date descending\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateMyOpenOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyOpenOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyOpenOrder = (order, account) => {\n  let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n  })\n}\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const priceChartSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    // Sort orders by date ascending to compare history\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate orders - add display attributes\n    orders = orders.map((o) => decorateOrder(o))\n    // Get last 2 order for final price & price change\n    let secondLastOrder, lastOrder\n    [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\n    // get last order price\n    const lastPrice = get(lastOrder, 'tokenPrice', 0)\n    // get second last order price\n    const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\n\n    return({\n      lastPrice,\n      lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\n      series: [{\n        data: buildGraphData(orders)\n      }]\n    })\n  }\n)\n\nconst buildGraphData = (orders) => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\n  // Get each hour where data exists\n  const hours = Object.keys(orders)\n  // Build the graph series\n  const graphData = hours.map((hour) => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]\n    // Calculate price values - open, high, low, close\n    const open = group[0] // first order\n    const high = maxBy(group, 'tokenPrice') // high price\n    const low = minBy(group, 'tokenPrice') // low price\n    const close = group[group.length - 1] // last order\n\n    return({\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    })\n  })\n\n  return graphData\n}\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\n\n// BALANCES\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\n\nconst etherBalance = state => get(state, 'web3.balance', 0)\nexport const etherBalanceSelector = createSelector(\n  etherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst tokenBalance = state => get(state, 'token.balance', 0)\nexport const tokenBalanceSelector = createSelector(\n  tokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\nexport const exchangeEtherBalanceSelector = createSelector(\n  exchangeEtherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector(\n  exchangeTokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\nexport const sellOrderSelector = createSelector(sellOrder, order => order)\n"]},"metadata":{},"sourceType":"module"}