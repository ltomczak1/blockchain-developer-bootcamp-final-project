{"ast":null,"code":"import Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nexport const loadWeb3 = async dispatch => {\n  if (typeof window.ethereum !== 'undefined') {\n    const web3 = new Web3(window.ethereum);\n    dispatch(web3Loaded(web3));\n    return web3;\n  } else {\n    window.alert('Please install MetaMask');\n    window.location.assign(\"https://metamask.io/\");\n  }\n};\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts();\n  const account = await accounts[0];\n\n  if (typeof account !== 'undefined') {\n    dispatch(web3AccountLoaded(account));\n    return account;\n  } else {\n    window.alert('Please login with MetaMask');\n    return null;\n  }\n};\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n    dispatch(tokenLoaded(token));\n    return token;\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n    return null;\n  }\n};\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n    dispatch(exchangeLoaded(exchange));\n    return exchange;\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/louistomczak/blockchain-developer-bootcamp/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","Token","Exchange","loadWeb3","dispatch","window","ethereum","web3","alert","location","assign","loadAccount","accounts","eth","getAccounts","account","loadToken","networkId","token","Contract","abi","networks","address","error","console","log","loadExchange","exchange"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SACEC,UADF,EAEEC,iBAFF,EAGEC,WAHF,EAIEC,cAJF,QAKO,WALP;AAMA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAP,IAAoB;AAC1C,MAAG,OAAOC,MAAM,CAACC,QAAd,KAAyB,WAA5B,EAAwC;AACtC,UAAMC,IAAI,GAAG,IAAIX,IAAJ,CAASS,MAAM,CAACC,QAAhB,CAAb;AACAF,IAAAA,QAAQ,CAACP,UAAU,CAACU,IAAD,CAAX,CAAR;AACA,WAAOA,IAAP;AACD,GAJD,MAIO;AACLF,IAAAA,MAAM,CAACG,KAAP,CAAa,yBAAb;AACAH,IAAAA,MAAM,CAACI,QAAP,CAAgBC,MAAhB,CAAuB,sBAAvB;AACD;AACF,CATM;AAWP,OAAO,MAAMC,WAAW,GAAG,OAAOJ,IAAP,EAAaH,QAAb,KAA0B;AACnD,QAAMQ,QAAQ,GAAG,MAAML,IAAI,CAACM,GAAL,CAASC,WAAT,EAAvB;AACA,QAAMC,OAAO,GAAG,MAAMH,QAAQ,CAAC,CAAD,CAA9B;;AACA,MAAG,OAAOG,OAAP,KAAmB,WAAtB,EAAkC;AAChCX,IAAAA,QAAQ,CAACN,iBAAiB,CAACiB,OAAD,CAAlB,CAAR;AACA,WAAOA,OAAP;AACD,GAHD,MAGO;AACLV,IAAAA,MAAM,CAACG,KAAP,CAAa,4BAAb;AACA,WAAO,IAAP;AACD;AACF,CAVM;AAYP,OAAO,MAAMQ,SAAS,GAAG,OAAOT,IAAP,EAAaU,SAAb,EAAwBb,QAAxB,KAAqC;AAC5D,MAAI;AACF,UAAMc,KAAK,GAAG,IAAIX,IAAI,CAACM,GAAL,CAASM,QAAb,CAAsBlB,KAAK,CAACmB,GAA5B,EAAiCnB,KAAK,CAACoB,QAAN,CAAeJ,SAAf,EAA0BK,OAA3D,CAAd;AACAlB,IAAAA,QAAQ,CAACL,WAAW,CAACmB,KAAD,CAAZ,CAAR;AACA,WAAOA,KAAP;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AACA,WAAO,IAAP;AACD;AACF,CATM;AAWP,OAAO,MAAMC,YAAY,GAAG,OAAOnB,IAAP,EAAaU,SAAb,EAAwBb,QAAxB,KAAqC;AAC/D,MAAI;AACF,UAAMuB,QAAQ,GAAG,IAAIpB,IAAI,CAACM,GAAL,CAASM,QAAb,CAAsBjB,QAAQ,CAACkB,GAA/B,EAAoClB,QAAQ,CAACmB,QAAT,CAAkBJ,SAAlB,EAA6BK,OAAjE,CAAjB;AACAlB,IAAAA,QAAQ,CAACJ,cAAc,CAAC2B,QAAD,CAAf,CAAR;AACA,WAAOA,QAAP;AACD,GAJD,CAIE,OAAOJ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AACA,WAAO,IAAP;AACD;AACF,CATM","sourcesContent":["import Web3 from 'web3'\nimport {\n  web3Loaded,\n  web3AccountLoaded,\n  tokenLoaded,\n  exchangeLoaded\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\n\nexport const loadWeb3 = async (dispatch) => {\n  if(typeof window.ethereum!=='undefined'){\n    const web3 = new Web3(window.ethereum)\n    dispatch(web3Loaded(web3))\n    return web3\n  } else {\n    window.alert('Please install MetaMask')\n    window.location.assign(\"https://metamask.io/\")\n  }\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts()\n  const account = await accounts[0]\n  if(typeof account !== 'undefined'){\n    dispatch(web3AccountLoaded(account))\n    return account\n  } else {\n    window.alert('Please login with MetaMask')\n    return null\n  }\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n    dispatch(exchangeLoaded(exchange))\n    return exchange\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}"]},"metadata":{},"sourceType":"module"}