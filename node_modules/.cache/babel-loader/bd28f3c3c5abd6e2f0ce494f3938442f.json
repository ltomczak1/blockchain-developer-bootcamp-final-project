{"ast":null,"code":"import Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded, cancelledOrdersLoaded, filledOrdersLoaded, allOrdersLoaded, orderCancelling, orderCancelled, orderFilling, orderFilled, etherBalanceLoaded, tokenBalanceLoaded, exchangeEtherBalanceLoaded, exchangeTokenBalanceLoaded, balancesLoaded, balancesLoading, buyOrderMaking, sellOrderMaking, orderMade } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nimport { ETHER_ADDRESS } from '../helpers';\nexport const loadWeb3 = async dispatch => {\n  if (typeof window.ethereum !== 'undefined') {\n    const web3 = new Web3(window.ethereum);\n    dispatch(web3Loaded(web3));\n    return web3;\n  } else {\n    window.alert('Please install MetaMask');\n    window.location.assign(\"https://metamask.io/\");\n  }\n};\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts();\n  const account = accounts[0];\n  dispatch(web3AccountLoaded(account));\n  return account;\n};\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n    dispatch(tokenLoaded(token));\n    return token;\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n    return null;\n  }\n};\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n    dispatch(exchangeLoaded(exchange));\n    return exchange;\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n    return null;\n  }\n};\nexport const loadAllOrders = async (exchange, dispatch) => {\n  // Fetch cancelled orders with the \"Cancel\" event stream\n  const cancelStream = await exchange.getPastEvents('Cancel', {\n    fromBlock: 0,\n    toBlock: 'latest'\n  }); // Format cancelled orders\n\n  const cancelledOrders = cancelStream.map(event => event.returnValues); // Add cancelled orders to the redux store\n\n  dispatch(cancelledOrdersLoaded(cancelledOrders)); // Fetch filled orders with the \"Trade\" event stream\n\n  const tradeStream = await exchange.getPastEvents('Trade', {\n    fromBlock: 0,\n    toBlock: 'latest'\n  }); // Format filled orders\n\n  const filledOrders = tradeStream.map(event => event.returnValues); // Add cancelled orders to the redux store\n\n  dispatch(filledOrdersLoaded(filledOrders)); // Load order stream\n\n  const orderStream = await exchange.getPastEvents('Order', {\n    fromBlock: 0,\n    toBlock: 'latest'\n  }); // Format order stream\n\n  const allOrders = orderStream.map(event => event.returnValues); // Add open orders to the redux store\n\n  dispatch(allOrdersLoaded(allOrders));\n};\nexport const subscribeToEvents = async (exchange, dispatch) => {\n  exchange.events.Cancel({}, (error, event) => {\n    dispatch(orderCancelled(event.returnValues));\n  });\n  exchange.events.Trade({}, (error, event) => {\n    dispatch(orderFilled(event.returnValues));\n  });\n  exchange.events.Deposit({}, (error, event) => {\n    dispatch(balancesLoaded());\n  });\n  exchange.events.Withdraw({}, (error, event) => {\n    dispatch(balancesLoaded());\n  });\n  exchange.events.Order({}, (error, event) => {\n    dispatch(orderMade(event.returnValues));\n  });\n};\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.cancelOrder(order.id).send({\n    from: account\n  }).on('transactionHash', hash => {\n    dispatch(orderCancelling());\n  }).on('error', error => {\n    console.log(error);\n    window.alert('There was an error!');\n  });\n};\nexport const fillOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.fillOrder(order.id).send({\n    from: account\n  }).on('transactionHash', hash => {\n    dispatch(orderFilling());\n  }).on('error', error => {\n    console.log(error);\n    window.alert('There was an error!');\n  });\n};\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\n  if (typeof account !== 'undefined') {\n    // Ether balance in wallet\n    const etherBalance = await web3.eth.getBalance(account);\n    dispatch(etherBalanceLoaded(etherBalance)); // Token balance in wallet\n\n    const tokenBalance = await token.methods.balanceOf(account).call();\n    dispatch(tokenBalanceLoaded(tokenBalance)); // Ether balance in exchange\n\n    const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call();\n    dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance)); // Token balance in exchange\n\n    const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call();\n    dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance)); // Trigger all balances loaded\n\n    dispatch(balancesLoaded());\n  } else {\n    window.alert('Please login with MetaMask');\n  }\n};\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.depositEther().send({\n    from: account,\n    value: web3.utils.toWei(amount, 'ether')\n  }).on('transactionHash', hash => {\n    dispatch(balancesLoading());\n  }).on('error', error => {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport const withdrawEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({\n    from: account\n  }).on('transactionHash', hash => {\n    dispatch(balancesLoading());\n  }).on('error', error => {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport const depositToken = (dispatch, exchange, web3, token, amount, account) => {\n  amount = web3.utils.toWei(amount, 'ether');\n  token.methods.approve(exchange.options.address, amount).send({\n    from: account\n  }).on('transactionHash', hash => {\n    exchange.methods.depositToken(token.options.address, amount).send({\n      from: account\n    }).on('transactionHash', hash => {\n      dispatch(balancesLoading());\n    }).on('error', error => {\n      console.error(error);\n      window.alert(\"There was an error!\");\n    });\n  });\n};\nexport const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\n  exchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({\n    from: account\n  }).on('transactionHash', hash => {\n    dispatch(balancesLoading());\n  }).on('error', error => {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = token.options.address;\n  const amountGet = web3.utils.toWei(order.amount, 'ether');\n  const tokenGive = ETHER_ADDRESS;\n  const amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether');\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({\n    from: account\n  }).on('transactionHash', hash => {\n    dispatch(buyOrderMaking());\n  }).on('error', error => {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = ETHER_ADDRESS;\n  const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether');\n  const tokenGive = token.options.address;\n  const amountGive = web3.utils.toWei(order.amount, 'ether');\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({\n    from: account\n  }).on('transactionHash', hash => {\n    dispatch(sellOrderMaking());\n  }).on('error', error => {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};","map":{"version":3,"sources":["/Users/louistomczak/blockchain-developer-bootcamp/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","cancelledOrdersLoaded","filledOrdersLoaded","allOrdersLoaded","orderCancelling","orderCancelled","orderFilling","orderFilled","etherBalanceLoaded","tokenBalanceLoaded","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","balancesLoaded","balancesLoading","buyOrderMaking","sellOrderMaking","orderMade","Token","Exchange","ETHER_ADDRESS","loadWeb3","dispatch","window","ethereum","web3","alert","location","assign","loadAccount","accounts","eth","getAccounts","account","loadToken","networkId","token","Contract","abi","networks","address","error","console","log","loadExchange","exchange","loadAllOrders","cancelStream","getPastEvents","fromBlock","toBlock","cancelledOrders","map","event","returnValues","tradeStream","filledOrders","orderStream","allOrders","subscribeToEvents","events","Cancel","Trade","Deposit","Withdraw","Order","cancelOrder","order","methods","id","send","from","on","hash","fillOrder","loadBalances","etherBalance","getBalance","tokenBalance","balanceOf","call","exchangeEtherBalance","exchangeTokenBalance","options","depositEther","amount","value","utils","toWei","withdrawEther","depositToken","approve","withdrawToken","makeBuyOrder","tokenGet","amountGet","tokenGive","amountGive","price","toString","makeOrder","makeSellOrder"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport {\n  web3Loaded,\n  web3AccountLoaded,\n  tokenLoaded,\n  exchangeLoaded,\n  cancelledOrdersLoaded,\n  filledOrdersLoaded,\n  allOrdersLoaded,\n  orderCancelling,\n  orderCancelled,\n  orderFilling,\n  orderFilled,\n  etherBalanceLoaded,\n  tokenBalanceLoaded,\n  exchangeEtherBalanceLoaded,\n  exchangeTokenBalanceLoaded,\n  balancesLoaded,\n  balancesLoading,\n  buyOrderMaking,\n  sellOrderMaking,\n  orderMade\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\nimport { ETHER_ADDRESS } from '../helpers'\n\nexport const loadWeb3 = async (dispatch) => {\n  if(typeof window.ethereum!=='undefined'){\n    const web3 = new Web3(window.ethereum)\n    dispatch(web3Loaded(web3))\n    return web3\n  } else {\n    window.alert('Please install MetaMask')\n    window.location.assign(\"https://metamask.io/\")\n  }\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.getAccounts()\n  const account = accounts[0]\n  dispatch(web3AccountLoaded(account))\n  return account\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n    dispatch(exchangeLoaded(exchange))\n    return exchange\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadAllOrders = async (exchange, dispatch) => {\n  // Fetch cancelled orders with the \"Cancel\" event stream\n  const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' })\n  // Format cancelled orders\n  const cancelledOrders = cancelStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(cancelledOrdersLoaded(cancelledOrders))\n\n  // Fetch filled orders with the \"Trade\" event stream\n  const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest' })\n  // Format filled orders\n  const filledOrders = tradeStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(filledOrdersLoaded(filledOrders))\n\n  // Load order stream\n  const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0,  toBlock: 'latest' })\n  // Format order stream\n  const allOrders = orderStream.map((event) => event.returnValues)\n  // Add open orders to the redux store\n  dispatch(allOrdersLoaded(allOrders))\n}\n\nexport const subscribeToEvents = async (exchange, dispatch) => {\n  exchange.events.Cancel({}, (error, event) => {\n    dispatch(orderCancelled(event.returnValues))\n  })\n\n  exchange.events.Trade({}, (error, event) => {\n    dispatch(orderFilled(event.returnValues))\n  })\n\n  exchange.events.Deposit({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  exchange.events.Withdraw({}, (error, event) => {\n    dispatch(balancesLoaded())\n  })\n\n  exchange.events.Order({}, (error, event) => {\n    dispatch(orderMade(event.returnValues))\n  })\n}\n\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.cancelOrder(order.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n     dispatch(orderCancelling())\n  })\n  .on('error', (error) => {\n    console.log(error)\n    window.alert('There was an error!')\n  })\n}\n\nexport const fillOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.fillOrder(order.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n     dispatch(orderFilling())\n  })\n  .on('error', (error) => {\n    console.log(error)\n    window.alert('There was an error!')\n  })\n}\n\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\n  if(typeof account !== 'undefined') {\n      // Ether balance in wallet\n      const etherBalance = await web3.eth.getBalance(account)\n      dispatch(etherBalanceLoaded(etherBalance))\n\n      // Token balance in wallet\n      const tokenBalance = await token.methods.balanceOf(account).call()\n      dispatch(tokenBalanceLoaded(tokenBalance))\n\n      // Ether balance in exchange\n      const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call()\n      dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance))\n\n      // Token balance in exchange\n      const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\n      dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance))\n\n      // Trigger all balances loaded\n      dispatch(balancesLoaded())\n    } else {\n      window.alert('Please login with MetaMask')\n    }\n}\n\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.depositEther().send({ from: account,  value: web3.utils.toWei(amount, 'ether') })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const withdrawEther = (dispatch, exchange, web3, amount, account) => {\n  exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const depositToken = (dispatch, exchange, web3, token, amount, account) => {\n  amount = web3.utils.toWei(amount, 'ether')\n\n  token.methods.approve(exchange.options.address, amount).send({ from: account })\n  .on('transactionHash', (hash) => {\n    exchange.methods.depositToken(token.options.address, amount).send({ from: account })\n    .on('transactionHash', (hash) => {\n      dispatch(balancesLoading())\n    })\n    .on('error',(error) => {\n      console.error(error)\n      window.alert(`There was an error!`)\n    })\n  })\n}\n\nexport const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\n  exchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(balancesLoading())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = token.options.address\n  const amountGet = web3.utils.toWei(order.amount, 'ether')\n  const tokenGive = ETHER_ADDRESS\n  const amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(buyOrderMaking())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}\n\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {\n  const tokenGet = ETHER_ADDRESS\n  const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n  const tokenGive = token.options.address\n  const amountGive = web3.utils.toWei(order.amount, 'ether')\n\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n  .on('transactionHash', (hash) => {\n    dispatch(sellOrderMaking())\n  })\n  .on('error',(error) => {\n    console.error(error)\n    window.alert(`There was an error!`)\n  })\n}"]},"metadata":{},"sourceType":"module"}